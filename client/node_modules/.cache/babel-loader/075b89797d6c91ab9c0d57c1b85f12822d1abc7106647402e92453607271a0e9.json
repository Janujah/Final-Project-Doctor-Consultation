{"ast":null,"code":"var _jsxFileName = \"/home/janujah/F-Pro_Doc/client/src/Components/createProfile.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import { useFormik } from 'formik';\n// // import * as Yup from 'yup';\n\n// // function ProfilePage() {\n// //     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n// //     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n// //     const formik = useFormik({\n// //         initialValues: {\n// //             fullName: 'John Doe',\n// //             email: 'john.doe@example.com',\n// //             bio: '',\n// //             availableTime: '',\n// //             registeredId: '',\n// //             workingHospitals: '',\n// //             age: '',\n// //             contactNo: ''\n// //         },\n// //         validationSchema: Yup.object({\n// //             fullName: Yup.string().required('Full name is required'),\n// //             email: Yup.string().email('Invalid email address').required('Email is required'),\n// //             bio: Yup.string(),\n// //             availableTime: Yup.string(),\n// //             registeredId: Yup.string().required('Registered ID is required'),\n// //             workingHospitals: Yup.string().required('Current working hospitals are required'),\n// //             age: Yup.number().positive().integer().required('Age is required'),\n// //             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n// //         }),\n// //         onSubmit: values => {\n// //             console.log('User Profile:', values);\n// //             alert('Profile updated!');\n// //         },\n// //     });\n\n// //     const handleImageChange = (file, setImage) => {\n// //         if (file) {\n// //             setImage(URL.createObjectURL(file));\n// //         }\n// //     };\n\n// //     return (\n// //         <div style={{ background:'linear-gradient(to bottom,   #FFFCFC,  #AB9551)'}}>\n// //         <div className=\"profile-container\" >\n// //             <h1>Your Profile</h1>\n// //             <form onSubmit={formik.handleSubmit} className=\"profile-form\">\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"fullName\">Full Name:</label>\n// //                     <input id=\"fullName\" type=\"text\" {...formik.getFieldProps('fullName')} />\n// //                     {formik.touched.fullName && formik.errors.fullName && <div className=\"error\">{formik.errors.fullName}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"email\">Email:</label>\n// //                     <input id=\"email\" type=\"email\" {...formik.getFieldProps('email')} />\n// //                     {formik.touched.email && formik.errors.email && <div className=\"error\">{formik.errors.email}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"bio\">Bio:</label>\n// //                     <textarea id=\"bio\" {...formik.getFieldProps('bio')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"availableTime\">Available Time:</label>\n// //                     <input id=\"availableTime\" type=\"text\" placeholder=\"e.g., Mondays, 3-5 PM\" {...formik.getFieldProps('availableTime')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"registeredId\">Registered ID:</label>\n// //                     <input id=\"registeredId\" type=\"text\" {...formik.getFieldProps('registeredId')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"workingHospitals\">Current Working places:</label>\n// //                     <input id=\"workingHospitals\" type=\"text\" {...formik.getFieldProps('workingHospitals')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"age\">Age:</label>\n// //                     <input id=\"age\" type=\"number\" {...formik.getFieldProps('age')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"contactNo\">Contact No:</label>\n// //                     <input id=\"contactNo\" type=\"text\" {...formik.getFieldProps('contactNo')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"profilePicture\">Profile Picture:</label>\n// //                     <input id=\"profilePicture\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setProfileImage)} />\n// //                     <img src={profileImage} alt=\"Profile\" className=\"profile-image\" />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n// //                     <input id=\"digitalSignature\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setSignatureImage)} />\n// //                     <img src={signatureImage} alt=\"Signature\" className=\"profile-image\" />\n// //                 </div>\n// //                 <button type=\"submit\" className=\"update-button\"><a href='/Doctors' style={{textDecoration:'none',  color:'white'}}>Update Profile</a></button>\n// //             </form>\n// //         </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default ProfilePage;\n\n// import React, { useState , useEffect } from 'react';\n// import { useFormik } from 'formik';\n// import * as Yup from 'yup';\n// import axios from 'axios';\n\n// function ProfilePage() {\n//     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n//     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n//     const formik = useFormik({\n//         initialValues: {\n//             fullName: '',\n//             email: '',\n//             bio: '',\n//             availableTime: '',\n//             registeredId: '',\n//             workingHospitals: '',\n//             age: '',\n//             contactNo: ''\n//         },\n//         validationSchema: Yup.object({\n//             fullName: Yup.string().required('Full name is required'),\n//             email: Yup.string().email('Invalid email address').required('Email is required'),\n//             bio: Yup.string(),\n//             availableTime: Yup.string(),\n//             registeredId: Yup.string().required('Registered ID is required'),\n//             workingHospitals: Yup.string().required('Current working hospitals are required'),\n//             age: Yup.number().positive().integer().required('Age is required'),\n//             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n//         }),\n\n//         onSubmit: values => {\n//             axios.post('http://localhost:3002/Doctors/create', {\n//                 ...values,\n//                 profileImage,\n//                 signatureImage\n//             })\n//             .then(response => {\n//                 alert('Profile updated successfully!');\n//             })\n//             .catch(error => {\n//                 alert('Failed to update profile.');\n//                 console.error('Error:', error);\n//             });\n//         },\n//     });\n\n//     const handleImageChange = (event, setImage) => {\n//         const file = event.currentTarget.files[0];\n//         if (file) {\n//             setImage(URL.createObjectURL(file));\n//         }\n//     };\n\n//     return (\n//         <div className=\"profile-container\" style={{ padding: \"20px\", fontFamily: \"Arial\" }}>\n//             <h1 style={{ textAlign: \"center\" }}>Your Profile</h1>\n//             <form onSubmit={formik.handleSubmit} style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"500px\", margin: \"auto\" }}>\n//                 {/* Full Name */}\n//                 <label htmlFor=\"fullName\">Full Name:</label>\n//                 <input\n//                     id=\"fullName\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('fullName')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.fullName && formik.errors.fullName && <div style={{ color: \"red\" }}>{formik.errors.fullName}</div>}\n\n//                 {/* Email */}\n//                 <label htmlFor=\"email\">Email:</label>\n//                 <input\n//                     id=\"email\"\n//                     type=\"email\"\n//                     {...formik.getFieldProps('email')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.email && formik.errors.email && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\n\n//                 {/* Bio */}\n//                 <label htmlFor=\"bio\">Bio:</label>\n//                 <textarea\n//                     id=\"bio\"\n//                     {...formik.getFieldProps('bio')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Available Time */}\n//                 <label htmlFor=\"availableTime\">Available Time:</label>\n//                 <input\n//                     id=\"availableTime\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('availableTime')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                     placeholder=\"e.g., Mondays, 3-5 PM\"\n//                 />\n\n//                 {/* Registered ID */}\n//                 <label htmlFor=\"registeredId\">Registered ID:</label>\n//                 <input\n//                     id=\"registeredId\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('registeredId')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Working Hospitals */}\n//                 <label htmlFor=\"workingHospitals\">Current Working Places:</label>\n//                 <input\n//                     id=\"workingHospitals\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('workingHospitals')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Age */}\n//                 <label htmlFor=\"age\">Age:</label>\n//                 <input\n//                     id=\"age\"\n//                     type=\"number\"\n//                     {...formik.getFieldProps('age')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Contact No */}\n//                 <label htmlFor=\"contactNo\">Contact No:</label>\n//                 <input\n//                     id=\"contactNo\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('contactNo')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Profile Picture */}\n//                 <label htmlFor=\"profilePicture\">Profile Picture:</label>\n//                 <input\n//                     id=\"profilePicture\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setProfileImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={profileImage} alt=\"Profile\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 {/* Digital Signature */}\n//                 <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n//                 <input\n//                     id=\"digitalSignature\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setSignatureImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={signatureImage} alt=\"Signature\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 <button type=\"submit\" style={{ padding: \"10px\", background: \"#4CAF50\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n//                     Save Profile\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default ProfilePage;\n\nimport React, { useState } from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProfilePage() {\n  _s();\n  const [profileImage, setProfileImage] = useState(null);\n  const [signatureImage, setSignatureImage] = useState(null);\n  const formik = useFormik({\n    initialValues: {\n      fullName: '',\n      email: '',\n      bio: '',\n      availableTime: '',\n      registeredId: '',\n      workingHospitals: '',\n      age: '',\n      contactNo: ''\n    },\n    validationSchema: Yup.object({\n      fullName: Yup.string().required('Full name is required'),\n      email: Yup.string().email('Invalid email address').required('Email is required'),\n      bio: Yup.string(),\n      availableTime: Yup.string(),\n      registeredId: Yup.string().required('Registered ID is required'),\n      workingHospitals: Yup.string().required('Current working hospitals are required'),\n      age: Yup.number().positive().integer().required('Age is required'),\n      contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n    }),\n    onSubmit: values => {\n      const formData = new FormData();\n      Object.keys(values).forEach(key => formData.append(key, values[key]));\n      if (profileImage) formData.append('profileImage', profileImage);\n      if (signatureImage) formData.append('signatureImage', signatureImage);\n      fetch('http://localhost:3002/SignUp/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      }).then(response => {\n        alert('Profile updated successfully!');\n      }).catch(error => {\n        alert('Failed to update profile.');\n        console.error('Error:', error);\n      });\n    }\n  });\n  const handleImageChange = (event, setImage) => {\n    const file = event.currentTarget.files[0];\n    if (file) {\n      setImage(file);\n      const fileReader = new FileReader();\n      fileReader.onloadend = () => {\n        formik.setFieldValue(event.currentTarget.name, fileReader.result);\n      };\n      fileReader.readAsDataURL(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\",\n    style: {\n      padding: \"20px\",\n      fontFamily: \"Arial\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Your Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        maxWidth: \"500px\",\n        margin: \"auto\"\n      },\n      encType: \"multipart/form-data\",\n      children: [Object.keys(formik.initialValues).map(key => key !== 'profileImage' && key !== 'signatureImage' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: key,\n          children: [key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1').trim(), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: key,\n          type: key === 'age' || key === 'contactNo' ? 'number' : 'text',\n          ...formik.getFieldProps(key),\n          style: {\n            padding: \"8px\",\n            margin: \"5px 0\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 29\n        }, this), formik.touched[key] && formik.errors[key] && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: \"red\"\n          },\n          children: formik.errors[key]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 75\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 25\n      }, this) : null), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"profileImage\",\n        children: \"Profile Picture:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"profileImage\",\n        name: \"profileImage\",\n        type: \"file\",\n        accept: \"image/*\"\n        // onChange={(event) => handleImageChange(event, setProfileImage)}\n        ,\n        style: {\n          margin: \"5px 0\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }, this), profileImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(profileImage),\n        alt: \"Profile\",\n        style: {\n          width: \"100px\",\n          height: \"100px\",\n          marginBottom: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"signatureImage\",\n        children: \"Digital Signature:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"signatureImage\",\n        name: \"signatureImage\",\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: event => handleImageChange(event, setSignatureImage),\n        style: {\n          margin: \"5px 0\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }, this), signatureImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(signatureImage),\n        alt: \"Signature\",\n        style: {\n          width: \"100px\",\n          height: \"100px\",\n          marginBottom: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 36\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          padding: \"10px\",\n          background: \"#4CAF50\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"5px\",\n          cursor: \"pointer\"\n        },\n        children: \"Save Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 9\n  }, this);\n}\n_s(ProfilePage, \"11qYoa1GQolB65IVutpA3UBZhX8=\", false, function () {\n  return [useFormik];\n});\n_c = ProfilePage;\nexport default ProfilePage;\nvar _c;\n$RefreshReg$(_c, \"ProfilePage\");","map":{"version":3,"names":["React","useState","useFormik","Yup","axios","jsxDEV","_jsxDEV","ProfilePage","_s","profileImage","setProfileImage","signatureImage","setSignatureImage","formik","initialValues","fullName","email","bio","availableTime","registeredId","workingHospitals","age","contactNo","validationSchema","object","string","required","number","positive","integer","matches","onSubmit","values","formData","FormData","Object","keys","forEach","key","append","fetch","method","headers","body","JSON","stringify","userData","then","response","alert","catch","error","console","handleImageChange","event","setImage","file","currentTarget","files","fileReader","FileReader","onloadend","setFieldValue","name","result","readAsDataURL","className","style","padding","fontFamily","children","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","display","flexDirection","maxWidth","margin","encType","map","htmlFor","charAt","toUpperCase","slice","replace","trim","id","type","getFieldProps","touched","errors","color","accept","src","URL","createObjectURL","alt","width","height","marginBottom","onChange","background","border","borderRadius","cursor","_c","$RefreshReg$"],"sources":["/home/janujah/F-Pro_Doc/client/src/Components/createProfile.js"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import { useFormik } from 'formik';\n// // import * as Yup from 'yup';\n\n// // function ProfilePage() {\n// //     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n// //     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n// //     const formik = useFormik({\n// //         initialValues: {\n// //             fullName: 'John Doe',\n// //             email: 'john.doe@example.com',\n// //             bio: '',\n// //             availableTime: '',\n// //             registeredId: '',\n// //             workingHospitals: '',\n// //             age: '',\n// //             contactNo: ''\n// //         },\n// //         validationSchema: Yup.object({\n// //             fullName: Yup.string().required('Full name is required'),\n// //             email: Yup.string().email('Invalid email address').required('Email is required'),\n// //             bio: Yup.string(),\n// //             availableTime: Yup.string(),\n// //             registeredId: Yup.string().required('Registered ID is required'),\n// //             workingHospitals: Yup.string().required('Current working hospitals are required'),\n// //             age: Yup.number().positive().integer().required('Age is required'),\n// //             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n// //         }),\n// //         onSubmit: values => {\n// //             console.log('User Profile:', values);\n// //             alert('Profile updated!');\n// //         },\n// //     });\n\n// //     const handleImageChange = (file, setImage) => {\n// //         if (file) {\n// //             setImage(URL.createObjectURL(file));\n// //         }\n// //     };\n\n// //     return (\n// //         <div style={{ background:'linear-gradient(to bottom,   #FFFCFC,  #AB9551)'}}>\n// //         <div className=\"profile-container\" >\n// //             <h1>Your Profile</h1>\n// //             <form onSubmit={formik.handleSubmit} className=\"profile-form\">\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"fullName\">Full Name:</label>\n// //                     <input id=\"fullName\" type=\"text\" {...formik.getFieldProps('fullName')} />\n// //                     {formik.touched.fullName && formik.errors.fullName && <div className=\"error\">{formik.errors.fullName}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"email\">Email:</label>\n// //                     <input id=\"email\" type=\"email\" {...formik.getFieldProps('email')} />\n// //                     {formik.touched.email && formik.errors.email && <div className=\"error\">{formik.errors.email}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"bio\">Bio:</label>\n// //                     <textarea id=\"bio\" {...formik.getFieldProps('bio')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"availableTime\">Available Time:</label>\n// //                     <input id=\"availableTime\" type=\"text\" placeholder=\"e.g., Mondays, 3-5 PM\" {...formik.getFieldProps('availableTime')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"registeredId\">Registered ID:</label>\n// //                     <input id=\"registeredId\" type=\"text\" {...formik.getFieldProps('registeredId')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"workingHospitals\">Current Working places:</label>\n// //                     <input id=\"workingHospitals\" type=\"text\" {...formik.getFieldProps('workingHospitals')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"age\">Age:</label>\n// //                     <input id=\"age\" type=\"number\" {...formik.getFieldProps('age')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"contactNo\">Contact No:</label>\n// //                     <input id=\"contactNo\" type=\"text\" {...formik.getFieldProps('contactNo')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"profilePicture\">Profile Picture:</label>\n// //                     <input id=\"profilePicture\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setProfileImage)} />\n// //                     <img src={profileImage} alt=\"Profile\" className=\"profile-image\" />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n// //                     <input id=\"digitalSignature\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setSignatureImage)} />\n// //                     <img src={signatureImage} alt=\"Signature\" className=\"profile-image\" />\n// //                 </div>\n// //                 <button type=\"submit\" className=\"update-button\"><a href='/Doctors' style={{textDecoration:'none',  color:'white'}}>Update Profile</a></button>\n// //             </form>\n// //         </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default ProfilePage;\n\n\n// import React, { useState , useEffect } from 'react';\n// import { useFormik } from 'formik';\n// import * as Yup from 'yup';\n// import axios from 'axios';\n\n// function ProfilePage() {\n//     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n//     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n    \n\n//     const formik = useFormik({\n//         initialValues: {\n//             fullName: '',\n//             email: '',\n//             bio: '',\n//             availableTime: '',\n//             registeredId: '',\n//             workingHospitals: '',\n//             age: '',\n//             contactNo: ''\n//         },\n//         validationSchema: Yup.object({\n//             fullName: Yup.string().required('Full name is required'),\n//             email: Yup.string().email('Invalid email address').required('Email is required'),\n//             bio: Yup.string(),\n//             availableTime: Yup.string(),\n//             registeredId: Yup.string().required('Registered ID is required'),\n//             workingHospitals: Yup.string().required('Current working hospitals are required'),\n//             age: Yup.number().positive().integer().required('Age is required'),\n//             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n//         }),\n\n//         onSubmit: values => {\n//             axios.post('http://localhost:3002/Doctors/create', {\n//                 ...values,\n//                 profileImage,\n//                 signatureImage\n//             })\n//             .then(response => {\n//                 alert('Profile updated successfully!');\n//             })\n//             .catch(error => {\n//                 alert('Failed to update profile.');\n//                 console.error('Error:', error);\n//             });\n//         },\n//     });\n\n//     const handleImageChange = (event, setImage) => {\n//         const file = event.currentTarget.files[0];\n//         if (file) {\n//             setImage(URL.createObjectURL(file));\n//         }\n//     };\n\n//     return (\n//         <div className=\"profile-container\" style={{ padding: \"20px\", fontFamily: \"Arial\" }}>\n//             <h1 style={{ textAlign: \"center\" }}>Your Profile</h1>\n//             <form onSubmit={formik.handleSubmit} style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"500px\", margin: \"auto\" }}>\n//                 {/* Full Name */}\n//                 <label htmlFor=\"fullName\">Full Name:</label>\n//                 <input\n//                     id=\"fullName\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('fullName')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.fullName && formik.errors.fullName && <div style={{ color: \"red\" }}>{formik.errors.fullName}</div>}\n\n//                 {/* Email */}\n//                 <label htmlFor=\"email\">Email:</label>\n//                 <input\n//                     id=\"email\"\n//                     type=\"email\"\n//                     {...formik.getFieldProps('email')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.email && formik.errors.email && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\n\n//                 {/* Bio */}\n//                 <label htmlFor=\"bio\">Bio:</label>\n//                 <textarea\n//                     id=\"bio\"\n//                     {...formik.getFieldProps('bio')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Available Time */}\n//                 <label htmlFor=\"availableTime\">Available Time:</label>\n//                 <input\n//                     id=\"availableTime\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('availableTime')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                     placeholder=\"e.g., Mondays, 3-5 PM\"\n//                 />\n\n//                 {/* Registered ID */}\n//                 <label htmlFor=\"registeredId\">Registered ID:</label>\n//                 <input\n//                     id=\"registeredId\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('registeredId')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Working Hospitals */}\n//                 <label htmlFor=\"workingHospitals\">Current Working Places:</label>\n//                 <input\n//                     id=\"workingHospitals\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('workingHospitals')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Age */}\n//                 <label htmlFor=\"age\">Age:</label>\n//                 <input\n//                     id=\"age\"\n//                     type=\"number\"\n//                     {...formik.getFieldProps('age')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Contact No */}\n//                 <label htmlFor=\"contactNo\">Contact No:</label>\n//                 <input\n//                     id=\"contactNo\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('contactNo')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Profile Picture */}\n//                 <label htmlFor=\"profilePicture\">Profile Picture:</label>\n//                 <input\n//                     id=\"profilePicture\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setProfileImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={profileImage} alt=\"Profile\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 {/* Digital Signature */}\n//                 <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n//                 <input\n//                     id=\"digitalSignature\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setSignatureImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={signatureImage} alt=\"Signature\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 <button type=\"submit\" style={{ padding: \"10px\", background: \"#4CAF50\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n//                     Save Profile\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default ProfilePage;\n\nimport React, { useState } from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\n\nfunction ProfilePage() {\n    const [profileImage, setProfileImage] = useState(null);\n    const [signatureImage, setSignatureImage] = useState(null);\n\n    const formik = useFormik({\n        initialValues: {\n            fullName: '',\n            email: '',\n            bio: '',\n            availableTime: '',\n            registeredId: '',\n            workingHospitals: '',\n            age: '',\n            contactNo: ''\n        },\n        validationSchema: Yup.object({\n            fullName: Yup.string().required('Full name is required'),\n            email: Yup.string().email('Invalid email address').required('Email is required'),\n            bio: Yup.string(),\n            availableTime: Yup.string(),\n            registeredId: Yup.string().required('Registered ID is required'),\n            workingHospitals: Yup.string().required('Current working hospitals are required'),\n            age: Yup.number().positive().integer().required('Age is required'),\n            contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n        }),\n        onSubmit: (values) => {\n            const formData = new FormData();\n            Object.keys(values).forEach(key => formData.append(key, values[key]));\n            if (profileImage) formData.append('profileImage', profileImage);\n            if (signatureImage) formData.append('signatureImage', signatureImage);\n\n            fetch('http://localhost:3002/SignUp/create', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(userData),\n              })\n            .then(response => {\n                alert('Profile updated successfully!');\n            })\n            .catch(error => {\n                alert('Failed to update profile.');\n                console.error('Error:', error);\n            });\n        },\n    });\n\n    const handleImageChange = (event, setImage) => {\n        const file = event.currentTarget.files[0];\n        if (file) {\n            setImage(file);\n            const fileReader = new FileReader();\n            fileReader.onloadend = () => {\n                formik.setFieldValue(event.currentTarget.name, fileReader.result);\n            };\n            fileReader.readAsDataURL(file);\n        }\n    };\n\n    return (\n        <div className=\"profile-container\" style={{ padding: \"20px\", fontFamily: \"Arial\" }}>\n            <h1 style={{ textAlign: \"center\" }}>Your Profile</h1>\n            <form onSubmit={formik.handleSubmit} style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"500px\", margin: \"auto\" }} encType=\"multipart/form-data\">\n                \n                {Object.keys(formik.initialValues).map((key) => (\n                    key !== 'profileImage' && key !== 'signatureImage' ? (\n                        <div key={key}>\n                            <label htmlFor={key}>{key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1').trim()}:</label>\n                            <input\n                                id={key}\n                                type={key === 'age' || key === 'contactNo' ? 'number' : 'text'}\n                                {...formik.getFieldProps(key)}\n                                style={{ padding: \"8px\", margin: \"5px 0\" }}\n                            />\n                            {formik.touched[key] && formik.errors[key] && <div style={{ color: \"red\" }}>{formik.errors[key]}</div>}\n                        </div>\n                    ) : null\n                ))}\n\n                {/* Profile Picture */}\n                <label htmlFor=\"profileImage\">Profile Picture:</label>\n                <input\n                    id=\"profileImage\"\n                    name=\"profileImage\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    // onChange={(event) => handleImageChange(event, setProfileImage)}\n                    style={{ margin: \"5px 0\" }}\n                />\n                {profileImage && <img src={URL.createObjectURL(profileImage)} alt=\"Profile\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />}\n\n                {/* Digital Signature */}\n                <label htmlFor=\"signatureImage\">Digital Signature:</label>\n                <input\n                    id=\"signatureImage\"\n                    name=\"signatureImage\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={(event) => handleImageChange(event, setSignatureImage)}\n                    style={{ margin: \"5px 0\" }}\n                />\n                {signatureImage && <img src={URL.createObjectURL(signatureImage)} alt=\"Signature\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />}\n\n                <button type=\"submit\" style={{ padding: \"10px\", background: \"#4CAF50\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n                    Save Profile\n                </button>\n            </form>\n        </div>\n    );\n}\n\nexport default ProfilePage;\n\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}