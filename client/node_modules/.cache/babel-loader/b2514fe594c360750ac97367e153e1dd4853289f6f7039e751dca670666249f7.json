{"ast":null,"code":"var _jsxFileName = \"/home/janujah/F-Pro_Doc/client/src/Components/createProfile.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import { useFormik } from 'formik';\n// // import * as Yup from 'yup';\n\n// // function ProfilePage() {\n// //     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n// //     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n// //     const formik = useFormik({\n// //         initialValues: {\n// //             fullName: 'John Doe',\n// //             email: 'john.doe@example.com',\n// //             bio: '',\n// //             availableTime: '',\n// //             registeredId: '',\n// //             workingHospitals: '',\n// //             age: '',\n// //             contactNo: ''\n// //         },\n// //         validationSchema: Yup.object({\n// //             fullName: Yup.string().required('Full name is required'),\n// //             email: Yup.string().email('Invalid email address').required('Email is required'),\n// //             bio: Yup.string(),\n// //             availableTime: Yup.string(),\n// //             registeredId: Yup.string().required('Registered ID is required'),\n// //             workingHospitals: Yup.string().required('Current working hospitals are required'),\n// //             age: Yup.number().positive().integer().required('Age is required'),\n// //             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n// //         }),\n// //         onSubmit: values => {\n// //             console.log('User Profile:', values);\n// //             alert('Profile updated!');\n// //         },\n// //     });\n\n// //     const handleImageChange = (file, setImage) => {\n// //         if (file) {\n// //             setImage(URL.createObjectURL(file));\n// //         }\n// //     };\n\n// //     return (\n// //         <div style={{ background:'linear-gradient(to bottom,   #FFFCFC,  #AB9551)'}}>\n// //         <div className=\"profile-container\" >\n// //             <h1>Your Profile</h1>\n// //             <form onSubmit={formik.handleSubmit} className=\"profile-form\">\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"fullName\">Full Name:</label>\n// //                     <input id=\"fullName\" type=\"text\" {...formik.getFieldProps('fullName')} />\n// //                     {formik.touched.fullName && formik.errors.fullName && <div className=\"error\">{formik.errors.fullName}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"email\">Email:</label>\n// //                     <input id=\"email\" type=\"email\" {...formik.getFieldProps('email')} />\n// //                     {formik.touched.email && formik.errors.email && <div className=\"error\">{formik.errors.email}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"bio\">Bio:</label>\n// //                     <textarea id=\"bio\" {...formik.getFieldProps('bio')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"availableTime\">Available Time:</label>\n// //                     <input id=\"availableTime\" type=\"text\" placeholder=\"e.g., Mondays, 3-5 PM\" {...formik.getFieldProps('availableTime')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"registeredId\">Registered ID:</label>\n// //                     <input id=\"registeredId\" type=\"text\" {...formik.getFieldProps('registeredId')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"workingHospitals\">Current Working places:</label>\n// //                     <input id=\"workingHospitals\" type=\"text\" {...formik.getFieldProps('workingHospitals')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"age\">Age:</label>\n// //                     <input id=\"age\" type=\"number\" {...formik.getFieldProps('age')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"contactNo\">Contact No:</label>\n// //                     <input id=\"contactNo\" type=\"text\" {...formik.getFieldProps('contactNo')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"profilePicture\">Profile Picture:</label>\n// //                     <input id=\"profilePicture\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setProfileImage)} />\n// //                     <img src={profileImage} alt=\"Profile\" className=\"profile-image\" />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n// //                     <input id=\"digitalSignature\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setSignatureImage)} />\n// //                     <img src={signatureImage} alt=\"Signature\" className=\"profile-image\" />\n// //                 </div>\n// //                 <button type=\"submit\" className=\"update-button\"><a href='/Doctors' style={{textDecoration:'none',  color:'white'}}>Update Profile</a></button>\n// //             </form>\n// //         </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default ProfilePage;\n\n// import React, { useState , useEffect } from 'react';\n// import { useFormik } from 'formik';\n// import * as Yup from 'yup';\n// import axios from 'axios';\n\n// function ProfilePage() {\n//     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n//     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n//     const formik = useFormik({\n//         initialValues: {\n//             fullName: '',\n//             email: '',\n//             bio: '',\n//             availableTime: '',\n//             registeredId: '',\n//             workingHospitals: '',\n//             age: '',\n//             contactNo: ''\n//         },\n//         validationSchema: Yup.object({\n//             fullName: Yup.string().required('Full name is required'),\n//             email: Yup.string().email('Invalid email address').required('Email is required'),\n//             bio: Yup.string(),\n//             availableTime: Yup.string(),\n//             registeredId: Yup.string().required('Registered ID is required'),\n//             workingHospitals: Yup.string().required('Current working hospitals are required'),\n//             age: Yup.number().positive().integer().required('Age is required'),\n//             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n//         }),\n\n//         onSubmit: values => {\n//             axios.post('http://localhost:3002/Doctors/create', {\n//                 ...values,\n//                 profileImage,\n//                 signatureImage\n//             })\n//             .then(response => {\n//                 alert('Profile updated successfully!');\n//             })\n//             .catch(error => {\n//                 alert('Failed to update profile.');\n//                 console.error('Error:', error);\n//             });\n//         },\n//     });\n\n//     const handleImageChange = (event, setImage) => {\n//         const file = event.currentTarget.files[0];\n//         if (file) {\n//             setImage(URL.createObjectURL(file));\n//         }\n//     };\n\n//     return (\n//         <div className=\"profile-container\" style={{ padding: \"20px\", fontFamily: \"Arial\" }}>\n//             <h1 style={{ textAlign: \"center\" }}>Your Profile</h1>\n//             <form onSubmit={formik.handleSubmit} style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"500px\", margin: \"auto\" }}>\n//                 {/* Full Name */}\n//                 <label htmlFor=\"fullName\">Full Name:</label>\n//                 <input\n//                     id=\"fullName\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('fullName')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.fullName && formik.errors.fullName && <div style={{ color: \"red\" }}>{formik.errors.fullName}</div>}\n\n//                 {/* Email */}\n//                 <label htmlFor=\"email\">Email:</label>\n//                 <input\n//                     id=\"email\"\n//                     type=\"email\"\n//                     {...formik.getFieldProps('email')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.email && formik.errors.email && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\n\n//                 {/* Bio */}\n//                 <label htmlFor=\"bio\">Bio:</label>\n//                 <textarea\n//                     id=\"bio\"\n//                     {...formik.getFieldProps('bio')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Available Time */}\n//                 <label htmlFor=\"availableTime\">Available Time:</label>\n//                 <input\n//                     id=\"availableTime\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('availableTime')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                     placeholder=\"e.g., Mondays, 3-5 PM\"\n//                 />\n\n//                 {/* Registered ID */}\n//                 <label htmlFor=\"registeredId\">Registered ID:</label>\n//                 <input\n//                     id=\"registeredId\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('registeredId')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Working Hospitals */}\n//                 <label htmlFor=\"workingHospitals\">Current Working Places:</label>\n//                 <input\n//                     id=\"workingHospitals\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('workingHospitals')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Age */}\n//                 <label htmlFor=\"age\">Age:</label>\n//                 <input\n//                     id=\"age\"\n//                     type=\"number\"\n//                     {...formik.getFieldProps('age')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Contact No */}\n//                 <label htmlFor=\"contactNo\">Contact No:</label>\n//                 <input\n//                     id=\"contactNo\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('contactNo')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Profile Picture */}\n//                 <label htmlFor=\"profilePicture\">Profile Picture:</label>\n//                 <input\n//                     id=\"profilePicture\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setProfileImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={profileImage} alt=\"Profile\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 {/* Digital Signature */}\n//                 <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n//                 <input\n//                     id=\"digitalSignature\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setSignatureImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={signatureImage} alt=\"Signature\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 <button type=\"submit\" style={{ padding: \"10px\", background: \"#4CAF50\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n//                     Save Profile\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default ProfilePage;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProfilePage() {\n  _s();\n  const [formData, setFormData] = useState({\n    fullName: '',\n    email: '',\n    bio: '',\n    availableTime: [''],\n    // Start with one empty time slot\n    registeredId: '',\n    workingHospitals: '',\n    age: '',\n    contactNo: ''\n  });\n  const [profileImage, setProfileImage] = useState(null);\n  const [signatureImage, setSignatureImage] = useState(null);\n  const [errors, setErrors] = useState({});\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.fullName) newErrors.fullName = 'Full name is required';\n    if (!formData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Invalid email address';\n    }\n    if (!formData.registeredId) newErrors.registeredId = 'Registered ID is required';\n    if (!formData.workingHospitals) newErrors.workingHospitals = 'Current working hospitals are required';\n    if (!formData.age) newErrors.age = 'Age is required';\n    if (!formData.contactNo || formData.contactNo.length !== 10) newErrors.contactNo = 'Must be a valid 10-digit phone number';\n\n    // Validate all available times are filled out\n    formData.availableTime.forEach((time, index) => {\n      if (!time) newErrors[`availableTime${index}`] = 'Available time is required';\n    });\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name.startsWith('availableTime')) {\n      const index = parseInt(name.replace('availableTime', ''), 10);\n      const newAvailableTimes = [...formData.availableTime];\n      newAvailableTimes[index] = value;\n      setFormData(prev => ({\n        ...prev,\n        availableTime: newAvailableTimes\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n  const handleAddTime = () => {\n    setFormData(prev => ({\n      ...prev,\n      availableTime: [...prev.availableTime, '']\n    }));\n  };\n  const handleImageChange = (event, setImage) => {\n    const file = event.target.files[0];\n    if (file) {\n      setImage(file);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!validateForm()) return;\n\n    // Implement your form submission logic here\n    console.log('Form submitted', formData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: 'linear-gradient(to bottom, #FFFCFC, #AB9551)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-container\",\n      style: {\n        padding: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Your Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          maxWidth: \"500px\",\n          margin: \"auto\"\n        },\n        encType: \"multipart/form-data\",\n        children: [Object.keys(formData).map(key => key !== 'availableTime' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: key,\n            children: [key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1').trim(), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: key,\n            name: key,\n            type: key === 'age' || key === 'contactNo' ? 'number' : 'text',\n            value: formData[key],\n            onChange: handleChange,\n            style: {\n              padding: \"8px\",\n              margin: \"5px 0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 25\n          }, this), errors[key] && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: \"red\"\n            },\n            children: errors[key]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 41\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this) : null), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Available Times:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 17\n        }, this), formData.availableTime.map((time, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            name: `availableTime${index}`,\n            type: \"text\",\n            value: time,\n            onChange: handleChange,\n            style: {\n              padding: \"8px\",\n              margin: \"5px 0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 25\n          }, this), errors[`availableTime${index}`] && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: \"red\"\n            },\n            children: errors[`availableTime${index}`]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 61\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleAddTime,\n          style: {\n            padding: \"10px\",\n            margin: \"5px 0\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"5px\",\n            cursor: \"pointer\"\n          },\n          children: \"Add Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"profileImage\",\n          children: \"Profile Picture:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"profileImage\",\n          name: \"profileImage\",\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: event => handleImageChange(event, setProfileImage),\n          style: {\n            margin: \"5px 0\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 17\n        }, this), profileImage && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: URL.createObjectURL(profileImage),\n          alt: \"Profile\",\n          style: {\n            width: \"100px\",\n            height: \"100px\",\n            marginBottom: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"signatureImage\",\n          children: \"Digital Signature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"signatureImage\",\n          name: \"signatureImage\",\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: event => handleImageChange(event, setSignatureImage),\n          style: {\n            margin: \"5px 0\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 17\n        }, this), signatureImage && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: URL.createObjectURL(signatureImage),\n          alt: \"Signature\",\n          style: {\n            width: \"100px\",\n            height: \"100px\",\n            marginBottom: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          style: {\n            padding: \"10px\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"5px\",\n            cursor: \"pointer\"\n          },\n          children: \"Save Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 9\n  }, this);\n}\n_s(ProfilePage, \"FdJojCVpOcHH/zhoGUmqt7qyYFg=\");\n_c = ProfilePage;\nexport default ProfilePage;\nvar _c;\n$RefreshReg$(_c, \"ProfilePage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ProfilePage","_s","formData","setFormData","fullName","email","bio","availableTime","registeredId","workingHospitals","age","contactNo","profileImage","setProfileImage","signatureImage","setSignatureImage","errors","setErrors","validateForm","newErrors","test","length","forEach","time","index","Object","keys","handleChange","e","name","value","target","startsWith","parseInt","replace","newAvailableTimes","prev","handleAddTime","handleImageChange","event","setImage","file","files","handleSubmit","preventDefault","console","log","style","background","children","className","padding","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","display","flexDirection","maxWidth","margin","encType","map","key","htmlFor","charAt","toUpperCase","slice","trim","id","type","onChange","color","onClick","border","borderRadius","cursor","accept","src","URL","createObjectURL","alt","width","height","marginBottom","_c","$RefreshReg$"],"sources":["/home/janujah/F-Pro_Doc/client/src/Components/createProfile.js"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import { useFormik } from 'formik';\n// // import * as Yup from 'yup';\n\n// // function ProfilePage() {\n// //     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n// //     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n// //     const formik = useFormik({\n// //         initialValues: {\n// //             fullName: 'John Doe',\n// //             email: 'john.doe@example.com',\n// //             bio: '',\n// //             availableTime: '',\n// //             registeredId: '',\n// //             workingHospitals: '',\n// //             age: '',\n// //             contactNo: ''\n// //         },\n// //         validationSchema: Yup.object({\n// //             fullName: Yup.string().required('Full name is required'),\n// //             email: Yup.string().email('Invalid email address').required('Email is required'),\n// //             bio: Yup.string(),\n// //             availableTime: Yup.string(),\n// //             registeredId: Yup.string().required('Registered ID is required'),\n// //             workingHospitals: Yup.string().required('Current working hospitals are required'),\n// //             age: Yup.number().positive().integer().required('Age is required'),\n// //             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n// //         }),\n// //         onSubmit: values => {\n// //             console.log('User Profile:', values);\n// //             alert('Profile updated!');\n// //         },\n// //     });\n\n// //     const handleImageChange = (file, setImage) => {\n// //         if (file) {\n// //             setImage(URL.createObjectURL(file));\n// //         }\n// //     };\n\n// //     return (\n// //         <div style={{ background:'linear-gradient(to bottom,   #FFFCFC,  #AB9551)'}}>\n// //         <div className=\"profile-container\" >\n// //             <h1>Your Profile</h1>\n// //             <form onSubmit={formik.handleSubmit} className=\"profile-form\">\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"fullName\">Full Name:</label>\n// //                     <input id=\"fullName\" type=\"text\" {...formik.getFieldProps('fullName')} />\n// //                     {formik.touched.fullName && formik.errors.fullName && <div className=\"error\">{formik.errors.fullName}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"email\">Email:</label>\n// //                     <input id=\"email\" type=\"email\" {...formik.getFieldProps('email')} />\n// //                     {formik.touched.email && formik.errors.email && <div className=\"error\">{formik.errors.email}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"bio\">Bio:</label>\n// //                     <textarea id=\"bio\" {...formik.getFieldProps('bio')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"availableTime\">Available Time:</label>\n// //                     <input id=\"availableTime\" type=\"text\" placeholder=\"e.g., Mondays, 3-5 PM\" {...formik.getFieldProps('availableTime')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"registeredId\">Registered ID:</label>\n// //                     <input id=\"registeredId\" type=\"text\" {...formik.getFieldProps('registeredId')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"workingHospitals\">Current Working places:</label>\n// //                     <input id=\"workingHospitals\" type=\"text\" {...formik.getFieldProps('workingHospitals')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"age\">Age:</label>\n// //                     <input id=\"age\" type=\"number\" {...formik.getFieldProps('age')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"contactNo\">Contact No:</label>\n// //                     <input id=\"contactNo\" type=\"text\" {...formik.getFieldProps('contactNo')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"profilePicture\">Profile Picture:</label>\n// //                     <input id=\"profilePicture\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setProfileImage)} />\n// //                     <img src={profileImage} alt=\"Profile\" className=\"profile-image\" />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n// //                     <input id=\"digitalSignature\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setSignatureImage)} />\n// //                     <img src={signatureImage} alt=\"Signature\" className=\"profile-image\" />\n// //                 </div>\n// //                 <button type=\"submit\" className=\"update-button\"><a href='/Doctors' style={{textDecoration:'none',  color:'white'}}>Update Profile</a></button>\n// //             </form>\n// //         </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default ProfilePage;\n\n\n// import React, { useState , useEffect } from 'react';\n// import { useFormik } from 'formik';\n// import * as Yup from 'yup';\n// import axios from 'axios';\n\n// function ProfilePage() {\n//     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n//     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n\n\n//     const formik = useFormik({\n//         initialValues: {\n//             fullName: '',\n//             email: '',\n//             bio: '',\n//             availableTime: '',\n//             registeredId: '',\n//             workingHospitals: '',\n//             age: '',\n//             contactNo: ''\n//         },\n//         validationSchema: Yup.object({\n//             fullName: Yup.string().required('Full name is required'),\n//             email: Yup.string().email('Invalid email address').required('Email is required'),\n//             bio: Yup.string(),\n//             availableTime: Yup.string(),\n//             registeredId: Yup.string().required('Registered ID is required'),\n//             workingHospitals: Yup.string().required('Current working hospitals are required'),\n//             age: Yup.number().positive().integer().required('Age is required'),\n//             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n//         }),\n\n//         onSubmit: values => {\n//             axios.post('http://localhost:3002/Doctors/create', {\n//                 ...values,\n//                 profileImage,\n//                 signatureImage\n//             })\n//             .then(response => {\n//                 alert('Profile updated successfully!');\n//             })\n//             .catch(error => {\n//                 alert('Failed to update profile.');\n//                 console.error('Error:', error);\n//             });\n//         },\n//     });\n\n//     const handleImageChange = (event, setImage) => {\n//         const file = event.currentTarget.files[0];\n//         if (file) {\n//             setImage(URL.createObjectURL(file));\n//         }\n//     };\n\n//     return (\n//         <div className=\"profile-container\" style={{ padding: \"20px\", fontFamily: \"Arial\" }}>\n//             <h1 style={{ textAlign: \"center\" }}>Your Profile</h1>\n//             <form onSubmit={formik.handleSubmit} style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"500px\", margin: \"auto\" }}>\n//                 {/* Full Name */}\n//                 <label htmlFor=\"fullName\">Full Name:</label>\n//                 <input\n//                     id=\"fullName\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('fullName')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.fullName && formik.errors.fullName && <div style={{ color: \"red\" }}>{formik.errors.fullName}</div>}\n\n//                 {/* Email */}\n//                 <label htmlFor=\"email\">Email:</label>\n//                 <input\n//                     id=\"email\"\n//                     type=\"email\"\n//                     {...formik.getFieldProps('email')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.email && formik.errors.email && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\n\n//                 {/* Bio */}\n//                 <label htmlFor=\"bio\">Bio:</label>\n//                 <textarea\n//                     id=\"bio\"\n//                     {...formik.getFieldProps('bio')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Available Time */}\n//                 <label htmlFor=\"availableTime\">Available Time:</label>\n//                 <input\n//                     id=\"availableTime\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('availableTime')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                     placeholder=\"e.g., Mondays, 3-5 PM\"\n//                 />\n\n//                 {/* Registered ID */}\n//                 <label htmlFor=\"registeredId\">Registered ID:</label>\n//                 <input\n//                     id=\"registeredId\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('registeredId')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Working Hospitals */}\n//                 <label htmlFor=\"workingHospitals\">Current Working Places:</label>\n//                 <input\n//                     id=\"workingHospitals\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('workingHospitals')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Age */}\n//                 <label htmlFor=\"age\">Age:</label>\n//                 <input\n//                     id=\"age\"\n//                     type=\"number\"\n//                     {...formik.getFieldProps('age')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Contact No */}\n//                 <label htmlFor=\"contactNo\">Contact No:</label>\n//                 <input\n//                     id=\"contactNo\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('contactNo')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Profile Picture */}\n//                 <label htmlFor=\"profilePicture\">Profile Picture:</label>\n//                 <input\n//                     id=\"profilePicture\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setProfileImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={profileImage} alt=\"Profile\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 {/* Digital Signature */}\n//                 <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n//                 <input\n//                     id=\"digitalSignature\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setSignatureImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={signatureImage} alt=\"Signature\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 <button type=\"submit\" style={{ padding: \"10px\", background: \"#4CAF50\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n//                     Save Profile\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default ProfilePage;\n\nimport React, { useState } from 'react';\n\nfunction ProfilePage() {\n    const [formData, setFormData] = useState({\n        fullName: '',\n        email: '',\n        bio: '',\n        availableTime: [''], // Start with one empty time slot\n        registeredId: '',\n        workingHospitals: '',\n        age: '',\n        contactNo: ''\n    });\n    const [profileImage, setProfileImage] = useState(null);\n    const [signatureImage, setSignatureImage] = useState(null);\n    const [errors, setErrors] = useState({});\n\n    const validateForm = () => {\n        const newErrors = {};\n        if (!formData.fullName) newErrors.fullName = 'Full name is required';\n        if (!formData.email) {\n            newErrors.email = 'Email is required';\n        } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n            newErrors.email = 'Invalid email address';\n        }\n        if (!formData.registeredId) newErrors.registeredId = 'Registered ID is required';\n        if (!formData.workingHospitals) newErrors.workingHospitals = 'Current working hospitals are required';\n        if (!formData.age) newErrors.age = 'Age is required';\n        if (!formData.contactNo || formData.contactNo.length !== 10) newErrors.contactNo = 'Must be a valid 10-digit phone number';\n\n        // Validate all available times are filled out\n        formData.availableTime.forEach((time, index) => {\n            if (!time) newErrors[`availableTime${index}`] = 'Available time is required';\n        });\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        if (name.startsWith('availableTime')) {\n            const index = parseInt(name.replace('availableTime', ''), 10);\n            const newAvailableTimes = [...formData.availableTime];\n            newAvailableTimes[index] = value;\n            setFormData(prev => ({ ...prev, availableTime: newAvailableTimes }));\n        } else {\n            setFormData(prev => ({ ...prev, [name]: value }));\n        }\n    };\n\n    const handleAddTime = () => {\n        setFormData(prev => ({\n            ...prev,\n            availableTime: [...prev.availableTime, '']\n        }));\n    };\n\n    const handleImageChange = (event, setImage) => {\n        const file = event.target.files[0];\n        if (file) {\n            setImage(file);\n        }\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!validateForm()) return;\n\n        // Implement your form submission logic here\n        console.log('Form submitted', formData);\n    };\n\n    return (\n        <div style={{ background:'linear-gradient(to bottom, #FFFCFC, #AB9551)'}}>\n        <div className=\"profile-container\" style={{ padding: \"20px\" }}>\n            <h1 style={{ textAlign: \"center\" }}>Your Profile</h1>\n            <form onSubmit={handleSubmit} style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"500px\", margin: \"auto\" }} encType=\"multipart/form-data\">\n                {Object.keys(formData).map((key) => key !== 'availableTime' ? (\n                    <div key={key}>\n                        <label htmlFor={key}>{key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1').trim()}:</label>\n                        <input\n                            id={key}\n                            name={key}\n                            type={key === 'age' || key === 'contactNo' ? 'number' : 'text'}\n                            value={formData[key]}\n                            onChange={handleChange}\n                            style={{ padding: \"8px\", margin: \"5px 0\" }}\n                        />\n                        {errors[key] && <div style={{ color: \"red\" }}>{errors[key]}</div>}\n                    </div>\n                ) : null)}\n\n                <div>Available Times:</div>\n                {formData.availableTime.map((time, index) => (\n                    <div key={index}>\n                        <input\n                            name={`availableTime${index}`}\n                            type=\"text\"\n                            value={time}\n                            onChange={handleChange}\n                            style={{ padding: \"8px\", margin: \"5px 0\" }}\n                        />\n                        {errors[`availableTime${index}`] && <div style={{ color: \"red\" }}>{errors[`availableTime${index}`]}</div>}\n                    </div>\n                ))}\n                <button type=\"button\" onClick={handleAddTime} style={{ padding: \"10px\", margin: \"5px 0\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n                    Add Time\n                </button>\n\n                <label htmlFor=\"profileImage\">Profile Picture:</label>\n                <input\n                    id=\"profileImage\"\n                    name=\"profileImage\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={(event) => handleImageChange(event, setProfileImage)}\n                    style={{ margin: \"5px 0\" }}\n                />\n                {profileImage && <img src={URL.createObjectURL(profileImage)} alt=\"Profile\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />}\n\n                <label htmlFor=\"signatureImage\">Digital Signature:</label>\n                <input\n                    id=\"signatureImage\"\n                    name=\"signatureImage\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={(event) => handleImageChange(event, setSignatureImage)}\n                    style={{ margin: \"5px 0\" }}\n                />\n                {signatureImage && <img src={URL.createObjectURL(signatureImage)} alt=\"Signature\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />}\n\n                <button type=\"submit\" style={{ padding: \"10px\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n                    Save Profile\n                </button>\n            </form>\n        </div>\n        </div>\n    );\n}\n\nexport default ProfilePage;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}