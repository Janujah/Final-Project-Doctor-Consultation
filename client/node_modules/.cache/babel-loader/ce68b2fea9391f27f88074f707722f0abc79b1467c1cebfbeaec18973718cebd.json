{"ast":null,"code":"var _jsxFileName = \"/home/janujah/F-Pro_Doc/client/src/Components/createProfile.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import { useFormik } from 'formik';\n// // import * as Yup from 'yup';\n\n// // function ProfilePage() {\n// //     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n// //     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n// //     const formik = useFormik({\n// //         initialValues: {\n// //             fullName: 'John Doe',\n// //             email: 'john.doe@example.com',\n// //             bio: '',\n// //             availableTime: '',\n// //             registeredId: '',\n// //             workingHospitals: '',\n// //             age: '',\n// //             contactNo: ''\n// //         },\n// //         validationSchema: Yup.object({\n// //             fullName: Yup.string().required('Full name is required'),\n// //             email: Yup.string().email('Invalid email address').required('Email is required'),\n// //             bio: Yup.string(),\n// //             availableTime: Yup.string(),\n// //             registeredId: Yup.string().required('Registered ID is required'),\n// //             workingHospitals: Yup.string().required('Current working hospitals are required'),\n// //             age: Yup.number().positive().integer().required('Age is required'),\n// //             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n// //         }),\n// //         onSubmit: values => {\n// //             console.log('User Profile:', values);\n// //             alert('Profile updated!');\n// //         },\n// //     });\n\n// //     const handleImageChange = (file, setImage) => {\n// //         if (file) {\n// //             setImage(URL.createObjectURL(file));\n// //         }\n// //     };\n\n// //     return (\n// //         <div style={{ background:'linear-gradient(to bottom,   #FFFCFC,  #AB9551)'}}>\n// //         <div className=\"profile-container\" >\n// //             <h1>Your Profile</h1>\n// //             <form onSubmit={formik.handleSubmit} className=\"profile-form\">\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"fullName\">Full Name:</label>\n// //                     <input id=\"fullName\" type=\"text\" {...formik.getFieldProps('fullName')} />\n// //                     {formik.touched.fullName && formik.errors.fullName && <div className=\"error\">{formik.errors.fullName}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"email\">Email:</label>\n// //                     <input id=\"email\" type=\"email\" {...formik.getFieldProps('email')} />\n// //                     {formik.touched.email && formik.errors.email && <div className=\"error\">{formik.errors.email}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"bio\">Bio:</label>\n// //                     <textarea id=\"bio\" {...formik.getFieldProps('bio')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"availableTime\">Available Time:</label>\n// //                     <input id=\"availableTime\" type=\"text\" placeholder=\"e.g., Mondays, 3-5 PM\" {...formik.getFieldProps('availableTime')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"registeredId\">Registered ID:</label>\n// //                     <input id=\"registeredId\" type=\"text\" {...formik.getFieldProps('registeredId')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"workingHospitals\">Current Working places:</label>\n// //                     <input id=\"workingHospitals\" type=\"text\" {...formik.getFieldProps('workingHospitals')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"age\">Age:</label>\n// //                     <input id=\"age\" type=\"number\" {...formik.getFieldProps('age')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"contactNo\">Contact No:</label>\n// //                     <input id=\"contactNo\" type=\"text\" {...formik.getFieldProps('contactNo')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"profilePicture\">Profile Picture:</label>\n// //                     <input id=\"profilePicture\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setProfileImage)} />\n// //                     <img src={profileImage} alt=\"Profile\" className=\"profile-image\" />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n// //                     <input id=\"digitalSignature\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setSignatureImage)} />\n// //                     <img src={signatureImage} alt=\"Signature\" className=\"profile-image\" />\n// //                 </div>\n// //                 <button type=\"submit\" className=\"update-button\"><a href='/Doctors' style={{textDecoration:'none',  color:'white'}}>Update Profile</a></button>\n// //             </form>\n// //         </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default ProfilePage;\n\n// import React, { useState , useEffect } from 'react';\n// import { useFormik } from 'formik';\n// import * as Yup from 'yup';\n// import axios from 'axios';\n\n// function ProfilePage() {\n//     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n//     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n//     const formik = useFormik({\n//         initialValues: {\n//             fullName: '',\n//             email: '',\n//             bio: '',\n//             availableTime: '',\n//             registeredId: '',\n//             workingHospitals: '',\n//             age: '',\n//             contactNo: ''\n//         },\n//         validationSchema: Yup.object({\n//             fullName: Yup.string().required('Full name is required'),\n//             email: Yup.string().email('Invalid email address').required('Email is required'),\n//             bio: Yup.string(),\n//             availableTime: Yup.string(),\n//             registeredId: Yup.string().required('Registered ID is required'),\n//             workingHospitals: Yup.string().required('Current working hospitals are required'),\n//             age: Yup.number().positive().integer().required('Age is required'),\n//             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n//         }),\n\n//         onSubmit: values => {\n//             axios.post('http://localhost:3002/Doctors/create', {\n//                 ...values,\n//                 profileImage,\n//                 signatureImage\n//             })\n//             .then(response => {\n//                 alert('Profile updated successfully!');\n//             })\n//             .catch(error => {\n//                 alert('Failed to update profile.');\n//                 console.error('Error:', error);\n//             });\n//         },\n//     });\n\n//     const handleImageChange = (event, setImage) => {\n//         const file = event.currentTarget.files[0];\n//         if (file) {\n//             setImage(URL.createObjectURL(file));\n//         }\n//     };\n\n//     return (\n//         <div className=\"profile-container\" style={{ padding: \"20px\", fontFamily: \"Arial\" }}>\n//             <h1 style={{ textAlign: \"center\" }}>Your Profile</h1>\n//             <form onSubmit={formik.handleSubmit} style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"500px\", margin: \"auto\" }}>\n//                 {/* Full Name */}\n//                 <label htmlFor=\"fullName\">Full Name:</label>\n//                 <input\n//                     id=\"fullName\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('fullName')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.fullName && formik.errors.fullName && <div style={{ color: \"red\" }}>{formik.errors.fullName}</div>}\n\n//                 {/* Email */}\n//                 <label htmlFor=\"email\">Email:</label>\n//                 <input\n//                     id=\"email\"\n//                     type=\"email\"\n//                     {...formik.getFieldProps('email')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.email && formik.errors.email && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\n\n//                 {/* Bio */}\n//                 <label htmlFor=\"bio\">Bio:</label>\n//                 <textarea\n//                     id=\"bio\"\n//                     {...formik.getFieldProps('bio')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Available Time */}\n//                 <label htmlFor=\"availableTime\">Available Time:</label>\n//                 <input\n//                     id=\"availableTime\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('availableTime')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                     placeholder=\"e.g., Mondays, 3-5 PM\"\n//                 />\n\n//                 {/* Registered ID */}\n//                 <label htmlFor=\"registeredId\">Registered ID:</label>\n//                 <input\n//                     id=\"registeredId\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('registeredId')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Working Hospitals */}\n//                 <label htmlFor=\"workingHospitals\">Current Working Places:</label>\n//                 <input\n//                     id=\"workingHospitals\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('workingHospitals')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Age */}\n//                 <label htmlFor=\"age\">Age:</label>\n//                 <input\n//                     id=\"age\"\n//                     type=\"number\"\n//                     {...formik.getFieldProps('age')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Contact No */}\n//                 <label htmlFor=\"contactNo\">Contact No:</label>\n//                 <input\n//                     id=\"contactNo\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('contactNo')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Profile Picture */}\n//                 <label htmlFor=\"profilePicture\">Profile Picture:</label>\n//                 <input\n//                     id=\"profilePicture\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setProfileImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={profileImage} alt=\"Profile\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 {/* Digital Signature */}\n//                 <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n//                 <input\n//                     id=\"digitalSignature\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setSignatureImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={signatureImage} alt=\"Signature\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 <button type=\"submit\" style={{ padding: \"10px\", background: \"#4CAF50\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n//                     Save Profile\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default ProfilePage;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProfilePage() {\n  _s();\n  const [formData, setFormData] = useState({\n    fullName: '',\n    email: '',\n    bio: '',\n    registeredId: '',\n    workingHospitals: '',\n    age: '',\n    contactNo: '',\n    availability: [{\n      day: '',\n      time: ''\n    }] // Array of objects for availability\n  });\n  const [profileImage, setProfileImage] = useState(null);\n  const [signatureImage, setSignatureImage] = useState(null);\n  const [errors, setErrors] = useState({});\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.fullName) newErrors.fullName = 'Full name is required';\n    if (!formData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Invalid email address';\n    }\n    if (!formData.registeredId) newErrors.registeredId = 'Registered ID is required';\n    if (!formData.workingHospitals) newErrors.workingHospitals = 'Current working hospitals are required';\n    if (!formData.age) newErrors.age = 'Age is required';\n    if (!formData.contactNo || formData.contactNo.length !== 10) newErrors.contactNo = 'Must be a valid 10-digit phone number';\n    formData.availability.forEach((slot, index) => {\n      if (!slot.day) newErrors[`day${index}`] = 'Day is required';\n      if (!slot.time) newErrors[`time${index}`] = 'Time is required';\n    });\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleAvailabilityChange = (index, field, value) => {\n    const updatedAvailability = [...formData.availability];\n    updatedAvailability[index][field] = value;\n    setFormData({\n      ...formData,\n      availability: updatedAvailability\n    });\n  };\n  const handleAddAvailability = () => {\n    setFormData(prev => ({\n      ...prev,\n      availability: [...prev.availability, {\n        day: '',\n        time: ''\n      }]\n    }));\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!validateForm()) return;\n\n    // Implement your form submission logic here\n    console.log('Form submitted', formData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: 'linear-gradient(to bottom, #FFFCFC, #AB9551)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-container\",\n      style: {\n        padding: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Your Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          maxWidth: \"500px\",\n          margin: \"auto\"\n        },\n        encType: \"multipart/form-data\",\n        children: [Object.keys(formData).map(key => key !== 'availability' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: key,\n            children: [key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1').trim(), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: key,\n            name: key,\n            type: key === 'age' || key === 'contactNo' ? 'number' : 'text',\n            value: formData[key],\n            onChange: e => setFormData({\n              ...formData,\n              [e.target.name]: e.target.value\n            }),\n            style: {\n              padding: \"8px\",\n              margin: \"5px 0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 29\n          }, this), errors[key] && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: \"red\"\n            },\n            children: errors[key]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 45\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 25\n        }, this) : null), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Availability:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 21\n        }, this), formData.availability.map((slot, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            marginBottom: '5px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Day:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: slot.day,\n              onChange: e => handleAvailabilityChange(index, 'day', e.target.value),\n              style: {\n                marginRight: '10px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 33\n            }, this), errors[`day${index}`] && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"red\"\n              },\n              children: errors[`day${index}`]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 59\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: slot.time,\n              onChange: e => handleAvailabilityChange(index, 'time', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 33\n            }, this), errors[`time${index}`] && /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"red\"\n              },\n              children: errors[`time${index}`]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 60\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleAddAvailability,\n          style: {\n            padding: \"10px\",\n            margin: \"5px 0\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"5px\",\n            cursor: \"pointer\"\n          },\n          children: \"Add Availability\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          style: {\n            padding: \"10px\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"5px\",\n            cursor: \"pointer\"\n          },\n          children: \"Save Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 9\n  }, this);\n}\n_s(ProfilePage, \"xKl/gs13XhhsIgIsE1Zn06aMLTc=\");\n_c = ProfilePage;\nexport default ProfilePage;\nvar _c;\n$RefreshReg$(_c, \"ProfilePage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ProfilePage","_s","formData","setFormData","fullName","email","bio","registeredId","workingHospitals","age","contactNo","availability","day","time","profileImage","setProfileImage","signatureImage","setSignatureImage","errors","setErrors","validateForm","newErrors","test","length","forEach","slot","index","Object","keys","handleAvailabilityChange","field","value","updatedAvailability","handleAddAvailability","prev","handleSubmit","e","preventDefault","console","log","style","background","children","className","padding","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","display","flexDirection","maxWidth","margin","encType","map","key","htmlFor","charAt","toUpperCase","slice","replace","trim","id","name","type","onChange","target","color","justifyContent","marginBottom","marginRight","onClick","border","borderRadius","cursor","_c","$RefreshReg$"],"sources":["/home/janujah/F-Pro_Doc/client/src/Components/createProfile.js"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import { useFormik } from 'formik';\n// // import * as Yup from 'yup';\n\n// // function ProfilePage() {\n// //     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n// //     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n// //     const formik = useFormik({\n// //         initialValues: {\n// //             fullName: 'John Doe',\n// //             email: 'john.doe@example.com',\n// //             bio: '',\n// //             availableTime: '',\n// //             registeredId: '',\n// //             workingHospitals: '',\n// //             age: '',\n// //             contactNo: ''\n// //         },\n// //         validationSchema: Yup.object({\n// //             fullName: Yup.string().required('Full name is required'),\n// //             email: Yup.string().email('Invalid email address').required('Email is required'),\n// //             bio: Yup.string(),\n// //             availableTime: Yup.string(),\n// //             registeredId: Yup.string().required('Registered ID is required'),\n// //             workingHospitals: Yup.string().required('Current working hospitals are required'),\n// //             age: Yup.number().positive().integer().required('Age is required'),\n// //             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n// //         }),\n// //         onSubmit: values => {\n// //             console.log('User Profile:', values);\n// //             alert('Profile updated!');\n// //         },\n// //     });\n\n// //     const handleImageChange = (file, setImage) => {\n// //         if (file) {\n// //             setImage(URL.createObjectURL(file));\n// //         }\n// //     };\n\n// //     return (\n// //         <div style={{ background:'linear-gradient(to bottom,   #FFFCFC,  #AB9551)'}}>\n// //         <div className=\"profile-container\" >\n// //             <h1>Your Profile</h1>\n// //             <form onSubmit={formik.handleSubmit} className=\"profile-form\">\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"fullName\">Full Name:</label>\n// //                     <input id=\"fullName\" type=\"text\" {...formik.getFieldProps('fullName')} />\n// //                     {formik.touched.fullName && formik.errors.fullName && <div className=\"error\">{formik.errors.fullName}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"email\">Email:</label>\n// //                     <input id=\"email\" type=\"email\" {...formik.getFieldProps('email')} />\n// //                     {formik.touched.email && formik.errors.email && <div className=\"error\">{formik.errors.email}</div>}\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"bio\">Bio:</label>\n// //                     <textarea id=\"bio\" {...formik.getFieldProps('bio')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"availableTime\">Available Time:</label>\n// //                     <input id=\"availableTime\" type=\"text\" placeholder=\"e.g., Mondays, 3-5 PM\" {...formik.getFieldProps('availableTime')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"registeredId\">Registered ID:</label>\n// //                     <input id=\"registeredId\" type=\"text\" {...formik.getFieldProps('registeredId')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"workingHospitals\">Current Working places:</label>\n// //                     <input id=\"workingHospitals\" type=\"text\" {...formik.getFieldProps('workingHospitals')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"age\">Age:</label>\n// //                     <input id=\"age\" type=\"number\" {...formik.getFieldProps('age')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"contactNo\">Contact No:</label>\n// //                     <input id=\"contactNo\" type=\"text\" {...formik.getFieldProps('contactNo')} />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"profilePicture\">Profile Picture:</label>\n// //                     <input id=\"profilePicture\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setProfileImage)} />\n// //                     <img src={profileImage} alt=\"Profile\" className=\"profile-image\" />\n// //                 </div>\n// //                 <div className=\"form-group\">\n// //                     <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n// //                     <input id=\"digitalSignature\" type=\"file\" accept=\"image/*\" onChange={(e) => handleImageChange(e.target.files[0], setSignatureImage)} />\n// //                     <img src={signatureImage} alt=\"Signature\" className=\"profile-image\" />\n// //                 </div>\n// //                 <button type=\"submit\" className=\"update-button\"><a href='/Doctors' style={{textDecoration:'none',  color:'white'}}>Update Profile</a></button>\n// //             </form>\n// //         </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default ProfilePage;\n\n\n// import React, { useState , useEffect } from 'react';\n// import { useFormik } from 'formik';\n// import * as Yup from 'yup';\n// import axios from 'axios';\n\n// function ProfilePage() {\n//     const [profileImage, setProfileImage] = useState('https://via.placeholder.com/150');\n//     const [signatureImage, setSignatureImage] = useState('https://via.placeholder.com/150');\n\n\n\n//     const formik = useFormik({\n//         initialValues: {\n//             fullName: '',\n//             email: '',\n//             bio: '',\n//             availableTime: '',\n//             registeredId: '',\n//             workingHospitals: '',\n//             age: '',\n//             contactNo: ''\n//         },\n//         validationSchema: Yup.object({\n//             fullName: Yup.string().required('Full name is required'),\n//             email: Yup.string().email('Invalid email address').required('Email is required'),\n//             bio: Yup.string(),\n//             availableTime: Yup.string(),\n//             registeredId: Yup.string().required('Registered ID is required'),\n//             workingHospitals: Yup.string().required('Current working hospitals are required'),\n//             age: Yup.number().positive().integer().required('Age is required'),\n//             contactNo: Yup.string().matches(/^[0-9]{10}$/, 'Must be a valid 10-digit phone number').required('Contact number is required')\n//         }),\n\n//         onSubmit: values => {\n//             axios.post('http://localhost:3002/Doctors/create', {\n//                 ...values,\n//                 profileImage,\n//                 signatureImage\n//             })\n//             .then(response => {\n//                 alert('Profile updated successfully!');\n//             })\n//             .catch(error => {\n//                 alert('Failed to update profile.');\n//                 console.error('Error:', error);\n//             });\n//         },\n//     });\n\n//     const handleImageChange = (event, setImage) => {\n//         const file = event.currentTarget.files[0];\n//         if (file) {\n//             setImage(URL.createObjectURL(file));\n//         }\n//     };\n\n//     return (\n//         <div className=\"profile-container\" style={{ padding: \"20px\", fontFamily: \"Arial\" }}>\n//             <h1 style={{ textAlign: \"center\" }}>Your Profile</h1>\n//             <form onSubmit={formik.handleSubmit} style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"500px\", margin: \"auto\" }}>\n//                 {/* Full Name */}\n//                 <label htmlFor=\"fullName\">Full Name:</label>\n//                 <input\n//                     id=\"fullName\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('fullName')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.fullName && formik.errors.fullName && <div style={{ color: \"red\" }}>{formik.errors.fullName}</div>}\n\n//                 {/* Email */}\n//                 <label htmlFor=\"email\">Email:</label>\n//                 <input\n//                     id=\"email\"\n//                     type=\"email\"\n//                     {...formik.getFieldProps('email')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n//                 {formik.touched.email && formik.errors.email && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\n\n//                 {/* Bio */}\n//                 <label htmlFor=\"bio\">Bio:</label>\n//                 <textarea\n//                     id=\"bio\"\n//                     {...formik.getFieldProps('bio')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Available Time */}\n//                 <label htmlFor=\"availableTime\">Available Time:</label>\n//                 <input\n//                     id=\"availableTime\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('availableTime')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                     placeholder=\"e.g., Mondays, 3-5 PM\"\n//                 />\n\n//                 {/* Registered ID */}\n//                 <label htmlFor=\"registeredId\">Registered ID:</label>\n//                 <input\n//                     id=\"registeredId\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('registeredId')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Working Hospitals */}\n//                 <label htmlFor=\"workingHospitals\">Current Working Places:</label>\n//                 <input\n//                     id=\"workingHospitals\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('workingHospitals')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Age */}\n//                 <label htmlFor=\"age\">Age:</label>\n//                 <input\n//                     id=\"age\"\n//                     type=\"number\"\n//                     {...formik.getFieldProps('age')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Contact No */}\n//                 <label htmlFor=\"contactNo\">Contact No:</label>\n//                 <input\n//                     id=\"contactNo\"\n//                     type=\"text\"\n//                     {...formik.getFieldProps('contactNo')}\n//                     style={{ padding: \"8px\", margin: \"5px 0\" }}\n//                 />\n\n//                 {/* Profile Picture */}\n//                 <label htmlFor=\"profilePicture\">Profile Picture:</label>\n//                 <input\n//                     id=\"profilePicture\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setProfileImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={profileImage} alt=\"Profile\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 {/* Digital Signature */}\n//                 <label htmlFor=\"digitalSignature\">Digital Signature:</label>\n//                 <input\n//                     id=\"digitalSignature\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={(event) => handleImageChange(event, setSignatureImage)}\n//                     style={{ margin: \"5px 0\" }}\n//                 />\n//                 <img src={signatureImage} alt=\"Signature\" style={{ width: \"100px\", height: \"100px\", marginBottom: \"10px\" }} />\n\n//                 <button type=\"submit\" style={{ padding: \"10px\", background: \"#4CAF50\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n//                     Save Profile\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default ProfilePage;\n\nimport React, { useState } from 'react';\n\nfunction ProfilePage() {\n    const [formData, setFormData] = useState({\n        fullName: '',\n        email: '',\n        bio: '',\n        registeredId: '',\n        workingHospitals: '',\n        age: '',\n        contactNo: '',\n        availability: [{ day: '', time: '' }] // Array of objects for availability\n    });\n    const [profileImage, setProfileImage] = useState(null);\n    const [signatureImage, setSignatureImage] = useState(null);\n    const [errors, setErrors] = useState({});\n\n    const validateForm = () => {\n        const newErrors = {};\n        if (!formData.fullName) newErrors.fullName = 'Full name is required';\n        if (!formData.email) {\n            newErrors.email = 'Email is required';\n        } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n            newErrors.email = 'Invalid email address';\n        }\n        if (!formData.registeredId) newErrors.registeredId = 'Registered ID is required';\n        if (!formData.workingHospitals) newErrors.workingHospitals = 'Current working hospitals are required';\n        if (!formData.age) newErrors.age = 'Age is required';\n        if (!formData.contactNo || formData.contactNo.length !== 10) newErrors.contactNo = 'Must be a valid 10-digit phone number';\n\n        formData.availability.forEach((slot, index) => {\n            if (!slot.day) newErrors[`day${index}`] = 'Day is required';\n            if (!slot.time) newErrors[`time${index}`] = 'Time is required';\n        });\n\n        setErrors(newErrors);\n        return Object.keys(newErrors).length === 0;\n    };\n\n    const handleAvailabilityChange = (index, field, value) => {\n        const updatedAvailability = [...formData.availability];\n        updatedAvailability[index][field] = value;\n        setFormData({ ...formData, availability: updatedAvailability });\n    };\n\n    const handleAddAvailability = () => {\n        setFormData(prev => ({\n            ...prev,\n            availability: [...prev.availability, { day: '', time: '' }]\n        }));\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!validateForm()) return;\n        \n        // Implement your form submission logic here\n        console.log('Form submitted', formData);\n    };\n\n    return (\n        <div style={{ background: 'linear-gradient(to bottom, #FFFCFC, #AB9551)' }}>\n            <div className=\"profile-container\" style={{ padding: \"20px\" }}>\n                <h1 style={{ textAlign: \"center\" }}>Your Profile</h1>\n                <form onSubmit={handleSubmit} style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"500px\", margin: \"auto\" }} encType=\"multipart/form-data\">\n                    {Object.keys(formData).map((key) => key !== 'availability' ? (\n                        <div key={key}>\n                            <label htmlFor={key}>{key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1').trim()}:</label>\n                            <input\n                                id={key}\n                                name={key}\n                                type={key === 'age' || key === 'contactNo' ? 'number' : 'text'}\n                                value={formData[key]}\n                                onChange={e => setFormData({ ...formData, [e.target.name]: e.target.value })}\n                                style={{ padding: \"8px\", margin: \"5px 0\" }}\n                            />\n                            {errors[key] && <div style={{ color: \"red\" }}>{errors[key]}</div>}\n                        </div>\n                    ) : null)}\n\n                    <div>Availability:</div>\n                    {formData.availability.map((slot, index) => (\n                        <div key={index} style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '5px' }}>\n                            <div>\n                                <label>Day:</label>\n                                <input\n                                    type=\"text\"\n                                    value={slot.day}\n                                    onChange={e => handleAvailabilityChange(index, 'day', e.target.value)}\n                                    style={{ marginRight: '10px' }}\n                                />\n                                {errors[`day${index}`] && <div style={{ color: \"red\" }}>{errors[`day${index}`]}</div>}\n                            </div>\n                            <div>\n                                <label>Time:</label>\n                                <input\n                                    type=\"text\"\n                                    value={slot.time}\n                                    onChange={e => handleAvailabilityChange(index, 'time', e.target.value)}\n                                />\n                                {errors[`time${index}`] && <div style={{ color: \"red\" }}>{errors[`time${index}`]}</div>}\n                            </div>\n                        </div>\n                    ))}\n                    <button type=\"button\" onClick={handleAddAvailability} style={{ padding: \"10px\", margin: \"5px 0\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n                        Add Availability\n                    </button>\n\n                    <button type=\"submit\" style={{ padding: \"10px\", color: \"white\", border: \"none\", borderRadius: \"5px\", cursor: \"pointer\" }}>\n                        Save Profile\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default ProfilePage;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}